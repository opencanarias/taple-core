[package]
name = "commons"
version = "0.1.1"
edition = "2021"
authors = ["Open Canarias S.L.<taple@opencanarias.com>"]
description = "TAPLE Protocol reference implementation"
# Remove when crates.io is published
documentation = "https://www.taple.es" 
readme = "../README.md"
homepage = "https://www.taple.es"
repository = "https://github.com/opencanarias/taple-core"
license = "AGPL-3.0-only"
keywords = ["blockchain", "distributed-ledger", "taple", "sustainability"]


# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[lib]
name = "commons"
path = "src/lib.rs"
bench = false

[features]
default = ["secp256k1", "x25519", "sha2", "sha3", "blake2"]
secp256k1 = ["libsecp256k1"]
x25519 = ["x25519-dalek", "curve25519-dalek"]

[dependencies]
serde = { workspace = true }
serde_json = { workspace = true }
serde_cbor = { workspace = true }
rmp-serde = { workspace = true }
thiserror = { workspace = true } # For eficient errors creation
async-trait = { workspace = true } # Rust's own suggested alternative for implementing traits with asynchronous methods
tokio = { workspace = true, features = [
    "sync",
    "rt",
    "rt-multi-thread",
    "time",
] }
getrandom = { workspace = true }
borsh = { workspace = true }
config = { workspace = true }
utoipa = { workspace = true }
json-patch = { workspace = true }
rand = { workspace = true }
rand_core = { workspace = true }

base64 = { workspace = true }
ed25519-dalek = { workspace = true, features = ["serde"] }
libsecp256k1 = { workspace = true, optional = true }
x25519-dalek = { workspace = true, optional = true }
curve25519-dalek = { workspace = true, optional = true }
blake2 = { workspace = true, optional = true }
blake3 = { workspace = true }
sha2 = { workspace = true, optional = true }
sha3 = { workspace = true, optional = true }
time = { workspace = true, features = ["std"] }

# oc_schema = {path = "../oc_schema"}
# libsds = {path = "../libsds"}

#LevelDB
leveldb = { workspace = true }
db-key = { workspace = true }     #Usar esta versión. Necesario para implementar custom keys para leveldb::Database
bincode = { workspace = true }    #Serializador necesario por serde para implementar la serialización y deserialización
jsonschema = { workspace = true }
url = { workspace = true }
#merge = {version =  "0.1.0", features = ["derive", "num", "std"]} #Necesario para implementar patron Merge. Util para mergear Settings por defecto frente a las introducidas por usuario.
[dev-dependencies]
tempfile = { workspace = true }
